<?php

namespace Modules\$CAMEL_MODULE_NAME$\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Modules\$CAMEL_MODULE_NAME$\Models\$CAMEL_RESOURCE_NAME$;
use Support\Responses\DataResponse;
use App\Http\Controllers\Controller;
use Support\Responses\PaginationDataResponse;
use Modules\$CAMEL_MODULE_NAME$\Requests\$CAMEL_RESOURCE_NAME$Request;
use Modules\$CAMEL_MODULE_NAME$\DTObjects\$CAMEL_RESOURCE_NAME$DTObject;
use Modules\$CAMEL_MODULE_NAME$\Collections\$CAMEL_RESOURCE_NAME$Collection;
use Illuminate\Http\JsonResponse;

class $CAMEL_RESOURCE_NAME$Controller extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Support\Responses\PaginationDataResponse|\Illuminate\Http\JsonResponse
     */
    public function index(Request $request) : PaginationDataResponse|JsonResponse
    {
        $this->authorize('viewAny', [$CAMEL_RESOURCE_NAME$::class, $request->company_id]);

        $data = $CAMEL_RESOURCE_NAME$::query()
            ->company($request->company_id)
            ->filterByMultiple($request->get('filters', []))
            ->orderByMultiple($request->get('sorters', []))
            ->orderBy($request->get('sort', 'id'), $request->get('direction', 'asc'))
            //->cache()
            ->paginate($request->get('per_page', 15));

        return new PaginationDataResponse([
            'paginator' => $data,
            'collection' => $CAMEL_RESOURCE_NAME$Collection::fromArray($data->items()),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Modules\$CAMEL_MODULE_NAME$\Requests\$CAMEL_RESOURCE_NAME$Request  $request
     * @return \Support\Responses\DataResponse|\Illuminate\Http\JsonResponse
     */
    public function store($CAMEL_RESOURCE_NAME$Request $request) : DataResponse|JsonResponse
    {
        $this->authorize('create', [$CAMEL_RESOURCE_NAME$::class, $request->company_id]);

        $$LOWER_RESOURCE_NAME$ = $CAMEL_RESOURCE_NAME$::create([
            ...$request->validated(),
            ...['company_id' => $request->company_id, 'created_by' => $request->user()->id]
        ]);

        return DataResponse::fromDTObject($CAMEL_RESOURCE_NAME$DTObject::fromModel($$LOWER_RESOURCE_NAME$), 201);
    }

    /**
     * Display the specified resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Modules\$CAMEL_MODULE_NAME$\Models\$CAMEL_RESOURCE_NAME$  $$LOWER_RESOURCE_NAME$
     * @return \Support\Responses\DataResponse|\Illuminate\Http\JsonResponse
     */
    public function show(Request $request, $CAMEL_RESOURCE_NAME$ $$LOWER_RESOURCE_NAME$) : DataResponse|JsonResponse
    {
        $this->authorize('view', $$LOWER_RESOURCE_NAME$);

        return DataResponse::fromDTObject($CAMEL_RESOURCE_NAME$DTObject::fromModel($$LOWER_RESOURCE_NAME$));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Modules\$CAMEL_MODULE_NAME$\Requests\$CAMEL_RESOURCE_NAME$Request  $request
     * @param  \Modules\$CAMEL_MODULE_NAME$\Models\$CAMEL_RESOURCE_NAME$  $$LOWER_RESOURCE_NAME$
     * @return \Support\Responses\DataResponse|\Illuminate\Http\JsonResponse
     */
    public function update($CAMEL_RESOURCE_NAME$Request $request, $CAMEL_RESOURCE_NAME$ $$LOWER_RESOURCE_NAME$) : DataResponse|JsonResponse
    {
        $this->authorize('update', $$LOWER_RESOURCE_NAME$);

        $$LOWER_RESOURCE_NAME$->update($request->validated());

        return DataResponse::fromDTObject($CAMEL_RESOURCE_NAME$DTObject::fromModel($$LOWER_RESOURCE_NAME$->refresh()));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Modules\$CAMEL_MODULE_NAME$\Models\$CAMEL_RESOURCE_NAME$  $$LOWER_RESOURCE_NAME$
     * @return \Illuminate\Http\Response|\Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request, $CAMEL_RESOURCE_NAME$ $$LOWER_RESOURCE_NAME$) : Response|JsonResponse
    {
        $this->authorize('delete', $$LOWER_RESOURCE_NAME$);

        $$LOWER_RESOURCE_NAME$->delete();

        return response()->noContent();
    }
}