<?php

namespace Modules\$CAMEL_MODULE_NAME$\Tests\Feature;

use Tests\TestCase;
use Admin\System\Models\User;
use Admin\Business\Models\Company;
use Modules\$CAMEL_MODULE_NAME$\Models\$CAMEL_RESOURCE_NAME$;
use Tests\Concerns\InteractsWithCompany;
use Illuminate\Testing\Fluent\AssertableJson;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Modules\$CAMEL_MODULE_NAME$\DTObjects\$CAMEL_RESOURCE_NAME$DTObject;

class $CAMEL_RESOURCE_NAME$Test extends TestCase
{
    use RefreshDatabase;
    use InteractsWithCompany;

    /**
     * Get all items.
     *
     * @return void
     */
    public function test_$SNAKE_PLURAL_RESOURCE_NAME$_can_be_displayed()
    {
        $company = Company::factory()->create();

        $user = User::factory()
            ->withCompanyAdmin($company)
            ->create();

        $CAMEL_RESOURCE_NAME$::factory()
            ->withCompany($company)
            ->count(10)
            ->create();

        $this->actingAs($user)
            ->withCompany($company)
            ->getJson('/api/$ENDPOINT$')
            ->assertStatus(200)
            ->assertJson(fn (AssertableJson $json) =>
                $json->has('data', 10)
                    ->has('links')
                    ->has('meta')
            );
    }

    /**
     * Get single item.
     *
     * @return void
     */
    public function test_$SNAKE_SINGULAR_RESOURCE_NAME$_can_be_displayed()
    {
        $company = Company::factory()->create();

        $user = User::factory()
            ->withCompanyAdmin($company)
            ->create();

        $$RESOURCE_NAME$ = $CAMEL_RESOURCE_NAME$::factory()
            ->withCompany($company)
            ->create();

        $this->actingAs($user)
            ->getJson('/api/$ENDPOINT$/' . $$RESOURCE_NAME$->id)
            ->assertStatus(200)
            ->assertJson(['data' => $this->toPlainArray(
                $CAMEL_RESOURCE_NAME$DTObject::fromModel($$RESOURCE_NAME$)->toArray()
            )]);
    }

    /**
     * Create item.
     *
     * @return void
     */
    public function test_$SNAKE_SINGULAR_RESOURCE_NAME$_can_be_created()
    {
        $company = Company::factory()->create();

        $user = User::factory()
            ->withCompanyAdmin($company)
            ->create();

        $data = $CAMEL_RESOURCE_NAME$::factory()
            ->make()
            ->toArray();

        $this->actingAs($user)
            ->withCompany($company)
            ->postJson('/api/$ENDPOINT$', $data)
            ->assertStatus(201)
            ->assertJson(['data' => $this->toPlainArray(
                $CAMEL_RESOURCE_NAME$DTObject::fromModel($CAMEL_RESOURCE_NAME$::whereData($data)->first())->toArray()
            )]);
    }

    /**
     * Update item.
     *
     * @return void
     */
    public function test_$SNAKE_SINGULAR_RESOURCE_NAME$_can_be_updated()
    {
        $company = Company::factory()->create();

        $user = User::factory()
            ->withCompanyAdmin($company)
            ->create();

        $data = $CAMEL_RESOURCE_NAME$::factory()
            ->make()
            ->toArray();

        $$RESOURCE_NAME$ = $CAMEL_RESOURCE_NAME$::factory()
            ->withCompany($company)
            ->create();

        $this->actingAs($user)
            ->putJson('/api/$ENDPOINT$/' . $$RESOURCE_NAME$->id, $data)
            ->assertStatus(200)
            ->assertJson(['data' => $this->toPlainArray(
                $CAMEL_RESOURCE_NAME$DTObject::fromModel($$RESOURCE_NAME$->fresh())->toArray()
            )]);
    }

    /**
     * Delete item.
     *
     * @return void
     */
    public function test_$SNAKE_SINGULAR_RESOURCE_NAME$_can_be_deleted()
    {
        $company = Company::factory()->create();

        $user = User::factory()
            ->withCompanyAdmin($company)
            ->create();

        $$RESOURCE_NAME$ = $CAMEL_RESOURCE_NAME$::factory()
            ->withCompany($company)
            ->create();

        $this->actingAs($user)
            ->deleteJson('/api/$ENDPOINT$/' . $$RESOURCE_NAME$->id)
            ->assertNoContent(204);
    }
}
